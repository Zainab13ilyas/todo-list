{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { TodoActionTypes } from \"state/todos/TodoActions\";\nimport { crudAPI } from \"components/Constants\";\nfunction* fetchTodosSaga() {\n  try {\n    const response = yield call(axios.get, crudAPI);\n    const todos = response.data;\n    yield put({\n      type: TodoActionTypes.FETCH_TODOS_SUCCESS,\n      payload: {\n        todos\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: TodoActionTypes.FETCH_TODOS_FAILURE,\n      payload: {\n        error: error.message\n      }\n    });\n  }\n}\nfunction* deleteTodoSaga(action) {\n  try {\n    console.log(\"Fgdf\");\n    const {\n      id\n    } = action.payload;\n    yield call(axios.delete, `${crudAPI}/${id}`);\n    yield put({\n      type: TodoActionTypes.DELETE_TODO_SUCCESS,\n      payload: {\n        id\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: TodoActionTypes.DELETE_TODO_FAILURE,\n      payload: {\n        error: error.message\n      }\n    });\n  }\n}\nfunction* watchDeleteTodo() {}\nfunction* updateTodoSaga(action) {\n  try {\n    const {\n      id,\n      updatedTodo\n    } = action.payload;\n    console.log(updatedTodo);\n    yield call(axios.put, `${crudAPI}/${id}`, updatedTodo, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    yield put({\n      type: TodoActionTypes.EDIT_TODO,\n      payload: {\n        id,\n        updatedTodo\n      }\n    });\n  } catch (error) {}\n}\nfunction* watchUpdateTodo() {}\nfunction* watchFetchTodos() {\n  yield takeLatest(TodoActionTypes.FETCH_TODOS_REQUEST, fetchTodosSaga);\n  //yield takeLatest(TodoActionTypes.DELETE_TODO_REQUEST, deleteTodoSaga);\n  yield takeLatest(TodoActionTypes.EDIT_TODO, updateTodoSaga);\n}\nexport function* todoSagas() {\n  yield watchFetchTodos();\n}\n// End of File (EOF)","map":{"version":3,"names":["call","put","takeLatest","axios","TodoActionTypes","crudAPI","fetchTodosSaga","response","get","todos","data","type","FETCH_TODOS_SUCCESS","payload","error","FETCH_TODOS_FAILURE","message","deleteTodoSaga","action","console","log","id","delete","DELETE_TODO_SUCCESS","DELETE_TODO_FAILURE","watchDeleteTodo","updateTodoSaga","updatedTodo","headers","EDIT_TODO","watchUpdateTodo","watchFetchTodos","FETCH_TODOS_REQUEST","todoSagas"],"sources":["/home/mergestack/todoapp/src/state/todos/Sagas.tsx"],"sourcesContent":["\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { TodoActionTypes } from \"state/todos/TodoActions\"\nimport { Todo, crudAPI } from \"components/Constants\";\n\nfunction* fetchTodosSaga(): any {\n  try {\n    const response = yield call(axios.get, crudAPI);\n    const todos: Todo[] = response.data;\n    yield put({ type: TodoActionTypes.FETCH_TODOS_SUCCESS, payload: { todos } });\n  } catch (error: any) {\n    yield put({ type: TodoActionTypes.FETCH_TODOS_FAILURE, payload: { error: error.message } });\n  }\n}\n\n\nfunction* deleteTodoSaga(action: { type: string, payload: { id: string } }) {\n  try {\n    console.log(\"Fgdf\")\n    const { id } = action.payload;\n    yield call(axios.delete, `${crudAPI}/${id}`);\n    yield put({ type: TodoActionTypes.DELETE_TODO_SUCCESS, payload: { id } });\n  } catch (error: any) {\n    yield put({ type: TodoActionTypes.DELETE_TODO_FAILURE, payload: { error: error.message } });\n  }\n}\n\nfunction* watchDeleteTodo() {\n}\nfunction* updateTodoSaga(action: { type: string, payload: { id: string, updatedTodo: Partial<Todo> } }) {\n  try {\n    const { id, updatedTodo } = action.payload;\n    console.log(updatedTodo)\n    yield call(axios.put, `${crudAPI}/${id}`, updatedTodo, {\n      headers: { 'Content-Type': 'application/json' }\n    });\n    yield put({ type: TodoActionTypes.EDIT_TODO, payload: { id, updatedTodo } });\n  } catch (error: any) {\n  }\n\n}\n\nfunction* watchUpdateTodo() {\n}\n\nfunction* watchFetchTodos() {\n  yield takeLatest(TodoActionTypes.FETCH_TODOS_REQUEST, fetchTodosSaga);\n  //yield takeLatest(TodoActionTypes.DELETE_TODO_REQUEST, deleteTodoSaga);\n  yield takeLatest(TodoActionTypes.EDIT_TODO, updateTodoSaga);\n\n}\nexport function* todoSagas() {\n  yield watchFetchTodos();\n}\n// End of File (EOF)\n"],"mappings":"AACA,SAASA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAAeC,OAAO,QAAQ,sBAAsB;AAEpD,UAAUC,cAAcA,CAAA,EAAQ;EAC9B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACG,KAAK,CAACK,GAAG,EAAEH,OAAO,CAAC;IAC/C,MAAMI,KAAa,GAAGF,QAAQ,CAACG,IAAI;IACnC,MAAMT,GAAG,CAAC;MAAEU,IAAI,EAAEP,eAAe,CAACQ,mBAAmB;MAAEC,OAAO,EAAE;QAAEJ;MAAM;IAAE,CAAC,CAAC;EAC9E,CAAC,CAAC,OAAOK,KAAU,EAAE;IACnB,MAAMb,GAAG,CAAC;MAAEU,IAAI,EAAEP,eAAe,CAACW,mBAAmB;MAAEF,OAAO,EAAE;QAAEC,KAAK,EAAEA,KAAK,CAACE;MAAQ;IAAE,CAAC,CAAC;EAC7F;AACF;AAGA,UAAUC,cAAcA,CAACC,MAAiD,EAAE;EAC1E,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,MAAM;MAAEC;IAAG,CAAC,GAAGH,MAAM,CAACL,OAAO;IAC7B,MAAMb,IAAI,CAACG,KAAK,CAACmB,MAAM,EAAG,GAAEjB,OAAQ,IAAGgB,EAAG,EAAC,CAAC;IAC5C,MAAMpB,GAAG,CAAC;MAAEU,IAAI,EAAEP,eAAe,CAACmB,mBAAmB;MAAEV,OAAO,EAAE;QAAEQ;MAAG;IAAE,CAAC,CAAC;EAC3E,CAAC,CAAC,OAAOP,KAAU,EAAE;IACnB,MAAMb,GAAG,CAAC;MAAEU,IAAI,EAAEP,eAAe,CAACoB,mBAAmB;MAAEX,OAAO,EAAE;QAAEC,KAAK,EAAEA,KAAK,CAACE;MAAQ;IAAE,CAAC,CAAC;EAC7F;AACF;AAEA,UAAUS,eAAeA,CAAA,EAAG,CAC5B;AACA,UAAUC,cAAcA,CAACR,MAA6E,EAAE;EACtG,IAAI;IACF,MAAM;MAAEG,EAAE;MAAEM;IAAY,CAAC,GAAGT,MAAM,CAACL,OAAO;IAC1CM,OAAO,CAACC,GAAG,CAACO,WAAW,CAAC;IACxB,MAAM3B,IAAI,CAACG,KAAK,CAACF,GAAG,EAAG,GAAEI,OAAQ,IAAGgB,EAAG,EAAC,EAAEM,WAAW,EAAE;MACrDC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IACF,MAAM3B,GAAG,CAAC;MAAEU,IAAI,EAAEP,eAAe,CAACyB,SAAS;MAAEhB,OAAO,EAAE;QAAEQ,EAAE;QAAEM;MAAY;IAAE,CAAC,CAAC;EAC9E,CAAC,CAAC,OAAOb,KAAU,EAAE,CACrB;AAEF;AAEA,UAAUgB,eAAeA,CAAA,EAAG,CAC5B;AAEA,UAAUC,eAAeA,CAAA,EAAG;EAC1B,MAAM7B,UAAU,CAACE,eAAe,CAAC4B,mBAAmB,EAAE1B,cAAc,CAAC;EACrE;EACA,MAAMJ,UAAU,CAACE,eAAe,CAACyB,SAAS,EAAEH,cAAc,CAAC;AAE7D;AACA,OAAO,UAAUO,SAASA,CAAA,EAAG;EAC3B,MAAMF,eAAe,CAAC,CAAC;AACzB;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}