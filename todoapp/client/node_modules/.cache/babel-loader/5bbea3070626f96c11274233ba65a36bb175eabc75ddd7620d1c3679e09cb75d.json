{"ast":null,"code":"var _jsxFileName = \"/home/mergestack/todoapp/src/containers/EditTodoModalContainer.tsx\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport TodoModal from \"components/EditTodoModal\";\nimport { editTodo } from \"state/todos/TodoActions\";\nimport { setAlert, disableAlert } from \"state/todos/AlertActions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*const TodoModalContainer = ({ todoId, handleCloseModal }: TodoModalContainerProps) => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todo.todos);\n  const alertValue = useSelector((state: RootState) => state.alert.PopUpAlert);\n\n  const handleUpdate = (todoId: string, text: string) => {\n    dispatch(editTodo(todoId, text));\n  }\n  const handleSetAlert = () => {\n    dispatch(setAlert());\n  }\n\n  const handleDisableAlert = () => {\n    dispatch(disableAlert());\n  }\n  return <TodoModal todoId={todoId}\n    handleCloseModal={handleCloseModal}\n    todos={todos}\n    onEditTodo={handleUpdate}\n    alertValue={alertValue}\n    onSetAlert={handleSetAlert}\n    onDisableAlert={handleDisableAlert} />;\n};\n\nexport default TodoModalContainer;\n// End of File (EOF)\n*/\nconst mapStateToProps = state => {\n  return {\n    todos: state.todo.todos,\n    alertValue: state.alert.PopUpAlert\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    onEditTodo: editTodo,\n    onSetAlert: setAlert,\n    onDisableAlert: disableAlert\n  }, dispatch);\n};\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nconst EditTodoModalContainer = _ref => {\n  let {\n    todoId,\n    handleCloseModal\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(TodoModal, {\n    todoId: todoId,\n    handleCloseModal: handleCloseModal,\n    onEditTodo: editTodo,\n    onSetAlert: onSetAlert,\n    onDisableAlert: onDisableAlert\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_c = EditTodoModalContainer;\nexport default _c2 = connector(EditTodoModalContainer);\n\n// End of File (EOF)\nvar _c, _c2;\n$RefreshReg$(_c, \"EditTodoModalContainer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["connect","bindActionCreators","TodoModal","editTodo","setAlert","disableAlert","jsxDEV","_jsxDEV","mapStateToProps","state","todos","todo","alertValue","alert","PopUpAlert","mapDispatchToProps","dispatch","onEditTodo","onSetAlert","onDisableAlert","connector","EditTodoModalContainer","_ref","todoId","handleCloseModal","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","$RefreshReg$"],"sources":["/home/mergestack/todoapp/src/containers/EditTodoModalContainer.tsx"],"sourcesContent":["import { useDispatch, useSelector, connect, ConnectedProps } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\"\nimport { RootState } from \"components/Constants\";\nimport TodoModal from \"components/EditTodoModal\";\nimport { editTodo } from \"state/todos/TodoActions\";\nimport { setAlert, disableAlert } from \"state/todos/AlertActions\";\n\ntype TodoModalContainerProps = {\n  todoId: string | null;\n  handleCloseModal: () => void;\n}\n/*const TodoModalContainer = ({ todoId, handleCloseModal }: TodoModalContainerProps) => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todo.todos);\n  const alertValue = useSelector((state: RootState) => state.alert.PopUpAlert);\n\n  const handleUpdate = (todoId: string, text: string) => {\n    dispatch(editTodo(todoId, text));\n  }\n  const handleSetAlert = () => {\n    dispatch(setAlert());\n  }\n\n  const handleDisableAlert = () => {\n    dispatch(disableAlert());\n  }\n  return <TodoModal todoId={todoId}\n    handleCloseModal={handleCloseModal}\n    todos={todos}\n    onEditTodo={handleUpdate}\n    alertValue={alertValue}\n    onSetAlert={handleSetAlert}\n    onDisableAlert={handleDisableAlert} />;\n};\n\nexport default TodoModalContainer;\n// End of File (EOF)\n*/\nconst mapStateToProps = (state: RootState) => {\n  return {\n    todos: state.todo.todos,\n    alertValue: state.alert.PopUpAlert,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      onEditTodo: editTodo,\n      onSetAlert: setAlert,\n      onDisableAlert: disableAlert,\n    },\n    dispatch\n  );\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\nconst EditTodoModalContainer = ({ todoId, handleCloseModal }: TodoModalContainerProps & PropsFromRedux) => {\n  return (\n    <TodoModal\n      todoId={todoId}\n      handleCloseModal={handleCloseModal}\n      onEditTodo={editTodo}\n      onSetAlert={onSetAlert}\n      onDisableAlert={onDisableAlert}\n    />\n  );\n};\n\nexport default connector(EditTodoModalContainer);\n\n\n// End of File (EOF)\n"],"mappings":";AAAA,SAAmCA,OAAO,QAAwB,aAAa;AAC/E,SAAmBC,kBAAkB,QAAQ,OAAO;AAEpD,OAAOC,SAAS,MAAM,0BAA0B;AAChD,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,QAAQ,EAAEC,YAAY,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAMlE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAIC,KAAgB,IAAK;EAC5C,OAAO;IACLC,KAAK,EAAED,KAAK,CAACE,IAAI,CAACD,KAAK;IACvBE,UAAU,EAAEH,KAAK,CAACI,KAAK,CAACC;EAC1B,CAAC;AACH,CAAC;AAED,MAAMC,kBAAkB,GAAIC,QAAkB,IAAK;EACjD,OAAOf,kBAAkB,CACvB;IACEgB,UAAU,EAAEd,QAAQ;IACpBe,UAAU,EAAEd,QAAQ;IACpBe,cAAc,EAAEd;EAClB,CAAC,EACDW,QACF,CAAC;AACH,CAAC;AAED,MAAMI,SAAS,GAAGpB,OAAO,CAACQ,eAAe,EAAEO,kBAAkB,CAAC;AAE9D,MAAMM,sBAAsB,GAAGC,IAAA,IAA4E;EAAA,IAA3E;IAAEC,MAAM;IAAEC;EAA2D,CAAC,GAAAF,IAAA;EACpG,oBACEf,OAAA,CAACL,SAAS;IACRqB,MAAM,EAAEA,MAAO;IACfC,gBAAgB,EAAEA,gBAAiB;IACnCP,UAAU,EAAEd,QAAS;IACrBe,UAAU,EAAEA,UAAW;IACvBC,cAAc,EAAEA;EAAe;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEN,CAAC;AAACC,EAAA,GAVIR,sBAAsB;AAY5B,eAAAS,GAAA,GAAeV,SAAS,CAACC,sBAAsB,CAAC;;AAGhD;AAAA,IAAAQ,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}