{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { TodoActionTypes } from \"state/todos/TodoActions\";\nimport { crudAPI } from \"components/Constants\";\nfunction* fetchTodosSaga() {\n  try {\n    const response = yield call(axios.get, crudAPI);\n    const todos = response.data;\n    yield put({\n      type: TodoActionTypes.FETCH_TODOS_SUCCESS,\n      payload: {\n        todos\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: TodoActionTypes.FETCH_TODOS_FAILURE,\n      payload: {\n        error: error.message\n      }\n    });\n  }\n}\nfunction* addTodoSaga(action) {\n  const newTodo = {\n    text: action.payload.text,\n    completed: false\n  };\n  try {\n    yield call(axios.post, crudAPI, newTodo);\n    //  yield put({ type: TodoActionTypes.ADD_TODO, payload: { text } });\n  } catch (error) {\n    console.error(error);\n  }\n}\nfunction* deleteTodoSaga(action) {\n  try {\n    console.log(\"Fgdf\");\n    const {\n      id\n    } = action.payload;\n    yield call(axios.delete, `${crudAPI}/${id}`);\n    // yield put({ type: TodoActionTypes.DELETE_TODO, payload: { id } });\n  } catch (error) {\n    console.error(error);\n  }\n}\nfunction* updateTodoSaga(action) {\n  try {\n    const {\n      id,\n      completed,\n      text\n    } = action.payload;\n    const updatedTodo = {\n      completed,\n      text\n    };\n    yield call(axios.put, `${crudAPI}/${id}`, updatedTodo, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\nfunction* toggleTodoSaga(action) {\n  try {\n    const {\n      id,\n      completed,\n      text\n    } = action.payload;\n    const updatedTodo = {\n      completed: !completed,\n      text\n    };\n    console.log(updatedTodo);\n    yield call(axios.put, `${crudAPI}/${id}`, updatedTodo, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\nfunction* watchFetchTodos() {\n  yield takeLatest(TodoActionTypes.FETCH_TODOS_REQUEST, fetchTodosSaga);\n  yield takeLatest(TodoActionTypes.ADD_TODO, addTodoSaga);\n  yield takeLatest(TodoActionTypes.DELETE_TODO, deleteTodoSaga);\n  yield takeLatest(TodoActionTypes.EDIT_TODO, updateTodoSaga);\n  yield takeLatest(TodoActionTypes.TOGGLE_TODO, toggleTodoSaga);\n}\nexport function* todoSagas() {\n  yield watchFetchTodos();\n}\n// End of File (EOF)","map":{"version":3,"names":["call","put","takeLatest","axios","TodoActionTypes","crudAPI","fetchTodosSaga","response","get","todos","data","type","FETCH_TODOS_SUCCESS","payload","error","FETCH_TODOS_FAILURE","message","addTodoSaga","action","newTodo","text","completed","post","console","deleteTodoSaga","log","id","delete","updateTodoSaga","updatedTodo","headers","toggleTodoSaga","watchFetchTodos","FETCH_TODOS_REQUEST","ADD_TODO","DELETE_TODO","EDIT_TODO","TOGGLE_TODO","todoSagas"],"sources":["/home/mergestack/todoapp/src/state/todos/Sagas.tsx"],"sourcesContent":["\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { TodoActionTypes } from \"state/todos/TodoActions\"\nimport { Todo, crudAPI } from \"components/Constants\";\n\nfunction* fetchTodosSaga(): any {\n  try {\n    const response = yield call(axios.get, crudAPI);\n    const todos: Todo[] = response.data;\n    yield put({ type: TodoActionTypes.FETCH_TODOS_SUCCESS, payload: { todos } });\n  } catch (error: any) {\n    yield put({ type: TodoActionTypes.FETCH_TODOS_FAILURE, payload: { error: error.message } });\n  }\n}\n\nfunction* addTodoSaga(action: { type: string, payload: { text: string } }) {\n  const newTodo = {\n    text: action.payload.text,\n    completed: false,\n  };\n  try {\n    yield call(axios.post, crudAPI, newTodo);\n    //  yield put({ type: TodoActionTypes.ADD_TODO, payload: { text } });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction* deleteTodoSaga(action: { type: string, payload: { id: string } }) {\n  try {\n    console.log(\"Fgdf\")\n    const { id } = action.payload;\n    yield call(axios.delete, `${crudAPI}/${id}`);\n    // yield put({ type: TodoActionTypes.DELETE_TODO, payload: { id } });\n  } catch (error: any) {\n    console.error(error)\n  }\n}\n\nfunction* updateTodoSaga(action: { type: string, payload: { id: string, text: string, completed: boolean } }) {\n  try {\n    const { id, completed, text } = action.payload;\n    const updatedTodo: Partial<Todo> = { completed, text }\n    yield call(axios.put, `${crudAPI}/${id}`, updatedTodo, {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error: any) {\n    console.error(error)\n  }\n\n}\nfunction* toggleTodoSaga(action: { type: string, payload: { id: string, text: string, completed: boolean } }) {\n  try {\n    const { id, completed, text } = action.payload;\n    const updatedTodo: Partial<Todo> = { completed: !completed, text }\n    console.log(updatedTodo)\n    yield call(axios.put, `${crudAPI}/${id}`, updatedTodo, {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error: any) {\n    console.error(error)\n  }\n\n}\n\nfunction* watchFetchTodos() {\n  yield takeLatest(TodoActionTypes.FETCH_TODOS_REQUEST, fetchTodosSaga);\n  yield takeLatest(TodoActionTypes.ADD_TODO, addTodoSaga);\n  yield takeLatest(TodoActionTypes.DELETE_TODO, deleteTodoSaga);\n  yield takeLatest(TodoActionTypes.EDIT_TODO, updateTodoSaga);\n  yield takeLatest(TodoActionTypes.TOGGLE_TODO, toggleTodoSaga);\n}\nexport function* todoSagas() {\n  yield watchFetchTodos();\n}\n// End of File (EOF)\n"],"mappings":"AACA,SAASA,IAAI,EAAEC,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAAeC,OAAO,QAAQ,sBAAsB;AAEpD,UAAUC,cAAcA,CAAA,EAAQ;EAC9B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACG,KAAK,CAACK,GAAG,EAAEH,OAAO,CAAC;IAC/C,MAAMI,KAAa,GAAGF,QAAQ,CAACG,IAAI;IACnC,MAAMT,GAAG,CAAC;MAAEU,IAAI,EAAEP,eAAe,CAACQ,mBAAmB;MAAEC,OAAO,EAAE;QAAEJ;MAAM;IAAE,CAAC,CAAC;EAC9E,CAAC,CAAC,OAAOK,KAAU,EAAE;IACnB,MAAMb,GAAG,CAAC;MAAEU,IAAI,EAAEP,eAAe,CAACW,mBAAmB;MAAEF,OAAO,EAAE;QAAEC,KAAK,EAAEA,KAAK,CAACE;MAAQ;IAAE,CAAC,CAAC;EAC7F;AACF;AAEA,UAAUC,WAAWA,CAACC,MAAmD,EAAE;EACzE,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAEF,MAAM,CAACL,OAAO,CAACO,IAAI;IACzBC,SAAS,EAAE;EACb,CAAC;EACD,IAAI;IACF,MAAMrB,IAAI,CAACG,KAAK,CAACmB,IAAI,EAAEjB,OAAO,EAAEc,OAAO,CAAC;IACxC;EACF,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdS,OAAO,CAACT,KAAK,CAACA,KAAK,CAAC;EACtB;AACF;AAEA,UAAUU,cAAcA,CAACN,MAAiD,EAAE;EAC1E,IAAI;IACFK,OAAO,CAACE,GAAG,CAAC,MAAM,CAAC;IACnB,MAAM;MAAEC;IAAG,CAAC,GAAGR,MAAM,CAACL,OAAO;IAC7B,MAAMb,IAAI,CAACG,KAAK,CAACwB,MAAM,EAAG,GAAEtB,OAAQ,IAAGqB,EAAG,EAAC,CAAC;IAC5C;EACF,CAAC,CAAC,OAAOZ,KAAU,EAAE;IACnBS,OAAO,CAACT,KAAK,CAACA,KAAK,CAAC;EACtB;AACF;AAEA,UAAUc,cAAcA,CAACV,MAAmF,EAAE;EAC5G,IAAI;IACF,MAAM;MAAEQ,EAAE;MAAEL,SAAS;MAAED;IAAK,CAAC,GAAGF,MAAM,CAACL,OAAO;IAC9C,MAAMgB,WAA0B,GAAG;MAAER,SAAS;MAAED;IAAK,CAAC;IACtD,MAAMpB,IAAI,CAACG,KAAK,CAACF,GAAG,EAAG,GAAEI,OAAQ,IAAGqB,EAAG,EAAC,EAAEG,WAAW,EAAE;MACrDC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOhB,KAAU,EAAE;IACnBS,OAAO,CAACT,KAAK,CAACA,KAAK,CAAC;EACtB;AAEF;AACA,UAAUiB,cAAcA,CAACb,MAAmF,EAAE;EAC5G,IAAI;IACF,MAAM;MAAEQ,EAAE;MAAEL,SAAS;MAAED;IAAK,CAAC,GAAGF,MAAM,CAACL,OAAO;IAC9C,MAAMgB,WAA0B,GAAG;MAAER,SAAS,EAAE,CAACA,SAAS;MAAED;IAAK,CAAC;IAClEG,OAAO,CAACE,GAAG,CAACI,WAAW,CAAC;IACxB,MAAM7B,IAAI,CAACG,KAAK,CAACF,GAAG,EAAG,GAAEI,OAAQ,IAAGqB,EAAG,EAAC,EAAEG,WAAW,EAAE;MACrDC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOhB,KAAU,EAAE;IACnBS,OAAO,CAACT,KAAK,CAACA,KAAK,CAAC;EACtB;AAEF;AAEA,UAAUkB,eAAeA,CAAA,EAAG;EAC1B,MAAM9B,UAAU,CAACE,eAAe,CAAC6B,mBAAmB,EAAE3B,cAAc,CAAC;EACrE,MAAMJ,UAAU,CAACE,eAAe,CAAC8B,QAAQ,EAAEjB,WAAW,CAAC;EACvD,MAAMf,UAAU,CAACE,eAAe,CAAC+B,WAAW,EAAEX,cAAc,CAAC;EAC7D,MAAMtB,UAAU,CAACE,eAAe,CAACgC,SAAS,EAAER,cAAc,CAAC;EAC3D,MAAM1B,UAAU,CAACE,eAAe,CAACiC,WAAW,EAAEN,cAAc,CAAC;AAC/D;AACA,OAAO,UAAUO,SAASA,CAAA,EAAG;EAC3B,MAAMN,eAAe,CAAC,CAAC;AACzB;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}