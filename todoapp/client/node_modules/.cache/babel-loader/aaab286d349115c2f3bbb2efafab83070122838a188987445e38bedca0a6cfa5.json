{"ast":null,"code":"import { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { crudAPI } from \"components/Constants\";\nimport { addTodo, toggleTodo, deleteTodo, fetchTodosRequest, fetchTodosSuccess, fetchTodosFailure } from \"state/todos/TodoActions\";\nimport { setAlert, disableAlert } from \"state/todos/AlertActions\";\nimport Todos from \"components/Todo\";\nimport axios from \"axios\";\n\n/*const TodosContainer = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todo.todos);\n  const alertValue = useSelector((state: RootState) => state.alert.PopUpAlert);\n\n  useEffect(() => {\n    dispatch(fetchTodosRequest());\n    fetchTodos();\n  }, [dispatch]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchTodos = async () => {\n    try {\n      const response = await axios.get(crudAPI);\n      const todos = response.data;\n      dispatch(fetchTodosSuccess(todos));\n    } catch (error: any) {\n      console.error(error);\n      dispatch(fetchTodosFailure(error.message));\n    }\n  };\n\n  const handleAddTodo = (id: string, text: string) => {\n    dispatch(addTodo(id, text));\n    fetchTodos()\n  };\n\n  const handleDeleteTodo = (id: string) => {\n    dispatch(deleteTodo(id));\n    fetchTodos()\n  };\n\n  const handleToggleTodo = (id: string) => {\n    dispatch(toggleTodo(id));\n    fetchTodos()\n  };\n\n  const handleSetAlert = () => {\n    dispatch(setAlert());\n  }\n\n  const handleDisableAlert = () => {\n    dispatch(disableAlert());\n  }\n\n\n  return (\n    <Todos\n      todos={todos}\n      onAddTodo={handleAddTodo}\n      onDeleteTodo={handleDeleteTodo}\n      onToggleTodo={handleToggleTodo}\n      alertValue={alertValue}\n      onSetAlert={handleSetAlert}\n      onDisableAlert={handleDisableAlert}\n    />\n  );\n};\n\nexport default TodosContainer;\n// End of File (EOF)\n*/\nconst fetchTodos = async dispatch => {\n  try {\n    const response = await axios.get(crudAPI);\n    const todos = response.data;\n    dispatch(fetchTodosSuccess(todos));\n  } catch (error) {\n    console.error(error);\n    dispatch(fetchTodosFailure(error.message));\n  }\n};\nconst mapStateToProps = state => {\n  return {\n    todos: state.todo.todos,\n    alertValue: state.alert.PopUpAlert\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    onAddTodo: addTodo,\n    onDeleteTodo: deleteTodo,\n    onToggleTodo: toggleTodo,\n    onSetAlert: setAlert,\n    onDisableAlert: disableAlert,\n    fetchTodosRequest: fetchTodosRequest,\n    fetchTodosSuccess: fetchTodosSuccess,\n    fetchTodosFailure: fetchTodosFailure,\n    fetchTodos: () => {\n      dispatch(fetchTodosRequest());\n      fetchTodos(dispatch);\n    }\n  }, dispatch);\n};\nconst TodosContainer = connect(mapStateToProps, mapDispatchToProps)(Todos);\nexport default TodosContainer;\n// End of File (EOF)","map":{"version":3,"names":["bindActionCreators","connect","crudAPI","addTodo","toggleTodo","deleteTodo","fetchTodosRequest","fetchTodosSuccess","fetchTodosFailure","setAlert","disableAlert","Todos","axios","fetchTodos","dispatch","response","get","todos","data","error","console","message","mapStateToProps","state","todo","alertValue","alert","PopUpAlert","mapDispatchToProps","onAddTodo","onDeleteTodo","onToggleTodo","onSetAlert","onDisableAlert","TodosContainer"],"sources":["/home/mergestack/todoapp/src/containers/TodoContainer.tsx"],"sourcesContent":["import { useEffect } from \"react\";\nimport { Dispatch, bindActionCreators } from \"redux\"\nimport { useDispatch, useSelector, connect } from \"react-redux\";\nimport { RootState, crudAPI } from \"components/Constants\";\nimport {\n  addTodo,\n  toggleTodo,\n  deleteTodo,\n  fetchTodosRequest,\n  fetchTodosSuccess,\n  fetchTodosFailure,\n} from \"state/todos/TodoActions\";\nimport { setAlert, disableAlert } from \"state/todos/AlertActions\";\nimport Todos from \"components/Todo\";\nimport axios from \"axios\";\n\n/*const TodosContainer = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todo.todos);\n  const alertValue = useSelector((state: RootState) => state.alert.PopUpAlert);\n\n  useEffect(() => {\n    dispatch(fetchTodosRequest());\n    fetchTodos();\n  }, [dispatch]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchTodos = async () => {\n    try {\n      const response = await axios.get(crudAPI);\n      const todos = response.data;\n      dispatch(fetchTodosSuccess(todos));\n    } catch (error: any) {\n      console.error(error);\n      dispatch(fetchTodosFailure(error.message));\n    }\n  };\n\n  const handleAddTodo = (id: string, text: string) => {\n    dispatch(addTodo(id, text));\n    fetchTodos()\n  };\n\n  const handleDeleteTodo = (id: string) => {\n    dispatch(deleteTodo(id));\n    fetchTodos()\n  };\n\n  const handleToggleTodo = (id: string) => {\n    dispatch(toggleTodo(id));\n    fetchTodos()\n  };\n\n  const handleSetAlert = () => {\n    dispatch(setAlert());\n  }\n\n  const handleDisableAlert = () => {\n    dispatch(disableAlert());\n  }\n\n\n  return (\n    <Todos\n      todos={todos}\n      onAddTodo={handleAddTodo}\n      onDeleteTodo={handleDeleteTodo}\n      onToggleTodo={handleToggleTodo}\n      alertValue={alertValue}\n      onSetAlert={handleSetAlert}\n      onDisableAlert={handleDisableAlert}\n    />\n  );\n};\n\nexport default TodosContainer;\n// End of File (EOF)\n*/\nconst fetchTodos = async (dispatch: Dispatch) => {\n  try {\n    const response = await axios.get(crudAPI);\n    const todos = response.data;\n    dispatch(fetchTodosSuccess(todos));\n  } catch (error: any) {\n    console.error(error);\n    dispatch(fetchTodosFailure(error.message));\n  }\n};\nconst mapStateToProps = (state: RootState) => {\n  return {\n    todos: state.todo.todos,\n    alertValue: state.alert.PopUpAlert,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return bindActionCreators(\n    {\n      onAddTodo: addTodo,\n      onDeleteTodo: deleteTodo,\n      onToggleTodo: toggleTodo,\n      onSetAlert: setAlert,\n      onDisableAlert: disableAlert,\n      fetchTodosRequest: fetchTodosRequest,\n      fetchTodosSuccess: fetchTodosSuccess,\n      fetchTodosFailure: fetchTodosFailure,\n      fetchTodos: () => {\n        dispatch(fetchTodosRequest());\n        fetchTodos(dispatch);\n      },\n    },\n    dispatch\n  );\n};\n\nconst TodosContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Todos);\n\nexport default TodosContainer;\n// End of File (EOF)\n"],"mappings":"AACA,SAAmBA,kBAAkB,QAAQ,OAAO;AACpD,SAAmCC,OAAO,QAAQ,aAAa;AAC/D,SAAoBC,OAAO,QAAQ,sBAAsB;AACzD,SACEC,OAAO,EACPC,UAAU,EACVC,UAAU,EACVC,iBAAiB,EACjBC,iBAAiB,EACjBC,iBAAiB,QACZ,yBAAyB;AAChC,SAASC,QAAQ,EAAEC,YAAY,QAAQ,0BAA0B;AACjE,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAG,MAAOC,QAAkB,IAAK;EAC/C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACd,OAAO,CAAC;IACzC,MAAMe,KAAK,GAAGF,QAAQ,CAACG,IAAI;IAC3BJ,QAAQ,CAACP,iBAAiB,CAACU,KAAK,CAAC,CAAC;EACpC,CAAC,CAAC,OAAOE,KAAU,EAAE;IACnBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBL,QAAQ,CAACN,iBAAiB,CAACW,KAAK,CAACE,OAAO,CAAC,CAAC;EAC5C;AACF,CAAC;AACD,MAAMC,eAAe,GAAIC,KAAgB,IAAK;EAC5C,OAAO;IACLN,KAAK,EAAEM,KAAK,CAACC,IAAI,CAACP,KAAK;IACvBQ,UAAU,EAAEF,KAAK,CAACG,KAAK,CAACC;EAC1B,CAAC;AACH,CAAC;AAED,MAAMC,kBAAkB,GAAId,QAAkB,IAAK;EACjD,OAAOd,kBAAkB,CACvB;IACE6B,SAAS,EAAE1B,OAAO;IAClB2B,YAAY,EAAEzB,UAAU;IACxB0B,YAAY,EAAE3B,UAAU;IACxB4B,UAAU,EAAEvB,QAAQ;IACpBwB,cAAc,EAAEvB,YAAY;IAC5BJ,iBAAiB,EAAEA,iBAAiB;IACpCC,iBAAiB,EAAEA,iBAAiB;IACpCC,iBAAiB,EAAEA,iBAAiB;IACpCK,UAAU,EAAEA,CAAA,KAAM;MAChBC,QAAQ,CAACR,iBAAiB,CAAC,CAAC,CAAC;MAC7BO,UAAU,CAACC,QAAQ,CAAC;IACtB;EACF,CAAC,EACDA,QACF,CAAC;AACH,CAAC;AAED,MAAMoB,cAAc,GAAGjC,OAAO,CAC5BqB,eAAe,EACfM,kBACF,CAAC,CAACjB,KAAK,CAAC;AAER,eAAeuB,cAAc;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}