{"ast":null,"code":"var _jsxFileName = \"/home/mergestack/todoapp/src/components/EditTodoModal.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Box, Modal, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { useGlobalState } from 'store/TodoStore';\nimport { useHookstate } from '@hookstate/core';\nimport { crudAPI } from 'components/Constants';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  popUp: {\n    \"&&\": {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: 'white',\n      width: '300px',\n      p: '1rem',\n      borderRadius: '8px',\n      padding: 15\n    }\n  },\n  popUpButton: {\n    \"&&\": {\n      width: '100%',\n      backgroundColor: '#ff5252',\n      color: 'white',\n      '&:hover': {\n        backgroundColor: 'black',\n        color: 'white'\n      }\n    }\n  }\n});\nconst TodoModal = _ref => {\n  _s();\n  let {\n    todoId,\n    handleCloseModal\n  } = _ref;\n  const classes = useStyles();\n  const {\n    tasksList\n  } = useGlobalState();\n  const text = useHookstate('');\n  const [showAlert, setShowAlert] = useState(false);\n  useEffect(() => {\n    if (tasksList.value) {\n      const selectedTodo = tasksList.value.find(todo => todo._id === todoId);\n      if (selectedTodo) {\n        text.set(selectedTodo.text);\n      } else {\n        text.set('');\n        handleCloseModal();\n      }\n    }\n  }, [todoId, handleCloseModal]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleChange = value => {\n    text.set(value);\n  };\n  const handleUpdate = async () => {\n    const prevTodos = tasksList.get({\n      noproxy: true\n    });\n    if (prevTodos) {\n      if (prevTodos.find(todo => todo.text === text.get())) {\n        setShowAlert(true);\n        return;\n      }\n      const updatedTodos = prevTodos.map(todo => todo._id === todoId ? {\n        ...todo,\n        text: text.get().trim()\n      } : todo);\n      tasksList.set(updatedTodos);\n      const selectedTodo = updatedTodos.find(todo => todo._id === todoId);\n      if (selectedTodo) {\n        const {\n          completed,\n          text\n        } = selectedTodo;\n        const updatedTodo = {\n          completed,\n          text\n        };\n        try {\n          await axios.put(`${crudAPI}/${selectedTodo._id}`, updatedTodo);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n      handleCloseModal();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    open: Boolean(todoId),\n    onClose: handleCloseModal,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.popUp,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Edit Todo\",\n        variant: \"outlined\",\n        onChange: e => handleChange(e.target.value),\n        type: \"text\",\n        value: text.value,\n        sx: {\n          width: '100%',\n          mb: '1rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleUpdate,\n        className: classes.popUpButton,\n        children: \"Update Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoModal, \"nNdNewB28j9jqkRwDp7IlE0OWlc=\", false, function () {\n  return [useStyles, useGlobalState, useHookstate];\n});\n_c = TodoModal;\nexport default TodoModal;\n// End of File (EOF)\nvar _c;\n$RefreshReg$(_c, \"TodoModal\");","map":{"version":3,"names":["useEffect","useState","Box","Modal","TextField","Button","makeStyles","useGlobalState","useHookstate","crudAPI","axios","jsxDEV","_jsxDEV","useStyles","popUp","position","top","left","transform","backgroundColor","width","p","borderRadius","padding","popUpButton","color","TodoModal","_ref","_s","todoId","handleCloseModal","classes","tasksList","text","showAlert","setShowAlert","value","selectedTodo","find","todo","_id","set","handleChange","handleUpdate","prevTodos","get","noproxy","updatedTodos","map","trim","completed","updatedTodo","put","error","console","open","Boolean","onClose","children","className","label","variant","onChange","e","target","type","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/mergestack/todoapp/src/components/EditTodoModal.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Box, Modal, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { useGlobalState } from 'store/TodoStore';\nimport { useHookstate } from '@hookstate/core';\nimport { crudAPI, Todo } from 'components/Constants';\nimport axios from 'axios';\n\nconst useStyles = makeStyles({\n  popUp: {\n    \"&&\": {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: 'white',\n      width: '300px',\n      p: '1rem',\n      borderRadius: '8px',\n      padding: 15\n    }\n  },\n  popUpButton: {\n    \"&&\": {\n      width: '100%',\n      backgroundColor: '#ff5252',\n      color: 'white',\n      '&:hover': {\n        backgroundColor: 'black',\n        color: 'white',\n      },\n    }\n  },\n})\n\ntype TodoModalProps = {\n  todoId: string | null;\n  handleCloseModal: () => void;\n};\n\nconst TodoModal = ({ todoId, handleCloseModal }: TodoModalProps) => {\n\n  const classes = useStyles();\n  const { tasksList } = useGlobalState();\n  const text = useHookstate('');\n  const [showAlert, setShowAlert] = useState(false);\n\n  useEffect(() => {\n    if (tasksList.value) {\n      const selectedTodo = tasksList.value.find(todo => todo._id === todoId);\n      if (selectedTodo) {\n        text.set(selectedTodo.text)\n      } else {\n        text.set('')\n        handleCloseModal();\n      }\n    }\n  }, [todoId, handleCloseModal]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleChange = (value: string) => {\n    text.set(value);\n  };\n\n  const handleUpdate = async () => {\n    const prevTodos = tasksList.get({ noproxy: true });\n\n    if (prevTodos) {\n      if (prevTodos.find((todo) => todo.text === text.get())) {\n        setShowAlert(true)\n        return;\n      }\n      const updatedTodos = prevTodos.map((todo) =>\n        todo._id === todoId ? { ...todo, text: text.get().trim() } : todo\n      );\n      tasksList.set(updatedTodos);\n\n      const selectedTodo = updatedTodos.find((todo) => todo._id === todoId);\n\n      if (selectedTodo) {\n        const { completed, text } = selectedTodo;\n        const updatedTodo: Partial<Todo> = { completed, text };\n        try {\n          await axios.put(`${crudAPI}/${selectedTodo._id}`, updatedTodo);\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n      handleCloseModal();\n    }\n  };\n\n  return (\n    <Modal open={Boolean(todoId)} onClose={handleCloseModal}>\n      <Box className={classes.popUp} >\n        <TextField\n          label=\"Edit Todo\"\n          variant=\"outlined\"\n          onChange={(e) => handleChange(e.target.value)}\n          type=\"text\"\n          value={text.value}\n          sx={{ width: '100%', mb: '1rem' }}\n        />\n        <Button\n          variant=\"outlined\"\n          onClick={handleUpdate}\n          className={classes.popUpButton}\n        >\n          Update Todo\n        </Button>\n      </Box>\n    </Modal>\n  );\n};\n\nexport default TodoModal;\n// End of File (EOF)\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}