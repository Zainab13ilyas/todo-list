{"ast":null,"code":"var _jsxFileName = \"/home/mergestack/todoapp/src/components/EditTodoModal.tsx\",\n  _s2 = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { Box, Modal, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { useGlobalState } from 'store/TodoStore';\nimport { useHookstate } from '@hookstate/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  popUp: {\n    \"&&\": {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: 'white',\n      width: '300px',\n      p: '1rem',\n      borderRadius: '8px',\n      padding: 15\n    }\n  },\n  popUpButton: {\n    \"&&\": {\n      width: '100%',\n      backgroundColor: '#ff5252',\n      color: 'white',\n      '&:hover': {\n        backgroundColor: 'black',\n        color: 'white'\n      }\n    }\n  }\n});\nconst TodoModal = _ref => {\n  _s2();\n  var _s = $RefreshSig$();\n  let {\n    todoId,\n    handleCloseModal\n  } = _ref;\n  const classes = useStyles();\n  const taskList = useGlobalState().tasksList.get({\n    noproxy: true\n  });\n  const text = useHookstate('');\n  useEffect(() => {\n    if (taskList) {\n      const selectedTodo = taskList.find(todo => todo.id === todoId);\n      if (selectedTodo) {\n        text.set(selectedTodo.text);\n      } else {\n        text.set('');\n        handleCloseModal();\n      }\n    }\n  }, [todoId, handleCloseModal]);\n  const handleChange = value => {\n    text.set(value);\n  };\n  const handleUpdate = () => {\n    _s();\n    const prevTodos = taskList;\n    if (prevTodos) {\n      const todos = prevTodos.map(todo => todo.id === todoId ? {\n        ...todo,\n        text: text.get().trim()\n      } : todo);\n      useGlobalState().tasksList.set(todos);\n    }\n    handleCloseModal();\n  };\n  _s(handleUpdate, \"Bttp7QoezsiczvPN+raPqJc7Vt4=\", false, function () {\n    return [useGlobalState];\n  });\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    open: Boolean(todoId),\n    onClose: handleCloseModal,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.popUp,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Edit Todo\",\n        variant: \"outlined\",\n        onChange: e => handleChange(e.target.value),\n        type: \"text\",\n        value: text.value,\n        sx: {\n          width: '100%',\n          mb: '1rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleUpdate,\n        className: classes.popUpButton,\n        children: \"Update Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s2(TodoModal, \"ZwUayh7vEi1Sw8L+Sw2Y5/Y4IfE=\", false, function () {\n  return [useStyles, useGlobalState, useHookstate];\n});\n_c = TodoModal;\nexport default TodoModal;\n// End of File (EOF)\nvar _c;\n$RefreshReg$(_c, \"TodoModal\");","map":{"version":3,"names":["useEffect","Box","Modal","TextField","Button","makeStyles","useGlobalState","useHookstate","jsxDEV","_jsxDEV","useStyles","popUp","position","top","left","transform","backgroundColor","width","p","borderRadius","padding","popUpButton","color","TodoModal","_ref","_s2","_s","$RefreshSig$","todoId","handleCloseModal","classes","taskList","tasksList","get","noproxy","text","selectedTodo","find","todo","id","set","handleChange","value","handleUpdate","prevTodos","todos","map","trim","open","Boolean","onClose","children","className","label","variant","onChange","e","target","type","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/mergestack/todoapp/src/components/EditTodoModal.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { Box, Modal, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { useGlobalState } from 'store/TodoStore';\nimport { useHookstate } from '@hookstate/core';\n\nconst useStyles = makeStyles({\n  popUp: {\n    \"&&\": {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: 'white',\n      width: '300px',\n      p: '1rem',\n      borderRadius: '8px',\n      padding: 15\n    }\n  },\n  popUpButton: {\n    \"&&\": {\n      width: '100%',\n      backgroundColor: '#ff5252',\n      color: 'white',\n      '&:hover': {\n        backgroundColor: 'black',\n        color: 'white',\n      },\n    }\n  },\n})\n\ntype TodoModalProps = {\n  todoId: string | null;\n  handleCloseModal: () => void;\n};\n\nconst TodoModal = ({ todoId, handleCloseModal }: TodoModalProps) => {\n\n  const classes = useStyles();\n  const taskList = useGlobalState().tasksList.get({ noproxy: true })\n  const text = useHookstate('');\n\n  useEffect(() => {\n    if (taskList) {\n      const selectedTodo = taskList.find(todo => todo.id === todoId);\n      if (selectedTodo) {\n        text.set(selectedTodo.text)\n      } else {\n        text.set('')\n        handleCloseModal();\n      }\n    }\n  }, [todoId, handleCloseModal]);\n\n  const handleChange = (value: string) => {\n    text.set(value);\n  };\n\n  const handleUpdate = () => {\n    const prevTodos = taskList;\n\n    if (prevTodos) {\n      const todos = prevTodos.map((todo) =>\n        todo.id === todoId ? { ...todo, text: text.get().trim() } : todo\n      )\n      useGlobalState().tasksList.set(todos);\n    }\n    handleCloseModal();\n  };\n  return (\n    <Modal open={Boolean(todoId)} onClose={handleCloseModal}>\n      <Box className={classes.popUp} >\n        <TextField\n          label=\"Edit Todo\"\n          variant=\"outlined\"\n          onChange={(e) => handleChange(e.target.value)}\n          type=\"text\"\n          value={text.value}\n          sx={{ width: '100%', mb: '1rem' }}\n        />\n        <Button\n          variant=\"outlined\"\n          onClick={handleUpdate}\n          className={classes.popUpButton}\n        >\n          Update Todo\n        </Button>\n      </Box>\n    </Modal>\n  );\n};\n\nexport default TodoModal;\n// End of File (EOF)\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}