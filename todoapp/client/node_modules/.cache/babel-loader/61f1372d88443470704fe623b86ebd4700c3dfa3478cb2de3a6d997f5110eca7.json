{"ast":null,"code":"import { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport TodoModal from \"components/EditTodoModal\";\nimport { editTodo } from \"state/todos/TodoActions\";\nimport { setAlert, disableAlert } from \"state/todos/AlertActions\";\n/*const TodoModalContainer = ({ todoId, handleCloseModal }: TodoModalContainerProps) => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todo.todos);\n  const alertValue = useSelector((state: RootState) => state.alert.PopUpAlert);\n\n  const handleUpdate = (todoId: string, text: string) => {\n    dispatch(editTodo(todoId, text));\n  }\n  const handleSetAlert = () => {\n    dispatch(setAlert());\n  }\n\n  const handleDisableAlert = () => {\n    dispatch(disableAlert());\n  }\n  return <TodoModal todoId={todoId}\n    handleCloseModal={handleCloseModal}\n    todos={todos}\n    onEditTodo={handleUpdate}\n    alertValue={alertValue}\n    onSetAlert={handleSetAlert}\n    onDisableAlert={handleDisableAlert} />;\n};\n\nexport default TodoModalContainer;\n// End of File (EOF)\n*/\nconst mapStateToProps = state => {\n  return {\n    todos: state.todo.todos,\n    alertValue: state.alert.PopUpAlert\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    onEditTodo: editTodo,\n    onSetAlert: setAlert,\n    onDisableAlert: disableAlert\n  }, dispatch);\n};\n\n/*const connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\nconst EditTodoModalContainer = ({ todoId, handleCloseModal }: TodoModalContainerProps & PropsFromRedux) => {\n  return (\n    <TodoModal\n      todoId={todoId}\n      handleCloseModal={handleCloseModal}\n      onEditTodo={editTodo}\n      onSetAlert={onSetAlert}\n      onDisableAlert={onDisableAlert}\n    />\n  );\n};\n\nexport default connector(EditTodoModalContainer);\n*/\nconst EditTodoModalContainer = connect(mapStateToProps, mapDispatchToProps)(TodoModal);\n\n// End of File (EOF)","map":{"version":3,"names":["connect","bindActionCreators","TodoModal","editTodo","setAlert","disableAlert","mapStateToProps","state","todos","todo","alertValue","alert","PopUpAlert","mapDispatchToProps","dispatch","onEditTodo","onSetAlert","onDisableAlert","EditTodoModalContainer"],"sources":["/home/mergestack/todoapp/src/containers/EditTodoModalContainer.tsx"],"sourcesContent":["import { useDispatch, useSelector, connect, ConnectedProps } from \"react-redux\";\nimport { Dispatch, bindActionCreators } from \"redux\"\nimport { RootState, Todp } from \"components/Constants\";\nimport TodoModal from \"components/EditTodoModal\";\nimport { editTodo } from \"state/todos/TodoActions\";\nimport { setAlert, disableAlert } from \"state/todos/AlertActions\";\n\ntype TodoModalContainerProps = {\n  todoId: string | null;\n  handleCloseModal: () => void;\n}\ntype StateProps = {\n  todos: Todo[];\n  alertValue: boolean;\n};\n\ntype DispatchProps = {\n  onEditTodo: (todoId: string, text: string) => void;\n  onSetAlert: () => void;\n  onDisableAlert: () => void;\n};\n/*const TodoModalContainer = ({ todoId, handleCloseModal }: TodoModalContainerProps) => {\n  const dispatch = useDispatch();\n  const todos = useSelector((state: RootState) => state.todo.todos);\n  const alertValue = useSelector((state: RootState) => state.alert.PopUpAlert);\n\n  const handleUpdate = (todoId: string, text: string) => {\n    dispatch(editTodo(todoId, text));\n  }\n  const handleSetAlert = () => {\n    dispatch(setAlert());\n  }\n\n  const handleDisableAlert = () => {\n    dispatch(disableAlert());\n  }\n  return <TodoModal todoId={todoId}\n    handleCloseModal={handleCloseModal}\n    todos={todos}\n    onEditTodo={handleUpdate}\n    alertValue={alertValue}\n    onSetAlert={handleSetAlert}\n    onDisableAlert={handleDisableAlert} />;\n};\n\nexport default TodoModalContainer;\n// End of File (EOF)\n*/\nconst mapStateToProps = (state: RootState): StateProps => {\n  return {\n    todos: state.todo.todos,\n    alertValue: state.alert.PopUpAlert,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return bindActionCreators(\n    {\n      onEditTodo: editTodo,\n      onSetAlert: setAlert,\n      onDisableAlert: disableAlert,\n    },\n    dispatch\n  );\n};\n\n/*const connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\nconst EditTodoModalContainer = ({ todoId, handleCloseModal }: TodoModalContainerProps & PropsFromRedux) => {\n  return (\n    <TodoModal\n      todoId={todoId}\n      handleCloseModal={handleCloseModal}\n      onEditTodo={editTodo}\n      onSetAlert={onSetAlert}\n      onDisableAlert={onDisableAlert}\n    />\n  );\n};\n\nexport default connector(EditTodoModalContainer);\n*/\nconst EditTodoModalContainer = connect<StateProps, DispatchProps, TodoModalProps>(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoModal);\n\n\n// End of File (EOF)\n"],"mappings":"AAAA,SAAmCA,OAAO,QAAwB,aAAa;AAC/E,SAAmBC,kBAAkB,QAAQ,OAAO;AAEpD,OAAOC,SAAS,MAAM,0BAA0B;AAChD,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,QAAQ,EAAEC,YAAY,QAAQ,0BAA0B;AAgBjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAIC,KAAgB,IAAiB;EACxD,OAAO;IACLC,KAAK,EAAED,KAAK,CAACE,IAAI,CAACD,KAAK;IACvBE,UAAU,EAAEH,KAAK,CAACI,KAAK,CAACC;EAC1B,CAAC;AACH,CAAC;AAED,MAAMC,kBAAkB,GAAIC,QAAkB,IAAoB;EAChE,OAAOb,kBAAkB,CACvB;IACEc,UAAU,EAAEZ,QAAQ;IACpBa,UAAU,EAAEZ,QAAQ;IACpBa,cAAc,EAAEZ;EAClB,CAAC,EACDS,QACF,CAAC;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMI,sBAAsB,GAAGlB,OAAO,CACpCM,eAAe,EACfO,kBACF,CAAC,CAACX,SAAS,CAAC;;AAGZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}