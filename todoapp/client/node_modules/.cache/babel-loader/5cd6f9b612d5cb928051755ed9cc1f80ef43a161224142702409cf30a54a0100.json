{"ast":null,"code":"var _jsxFileName = \"/home/mergestack/todoapp/src/components/EditTodoModal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { Box, Modal, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { useHookstate } from '@hookstate/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Import the global state hook\nconst useStyles = makeStyles({\n  popUp: {\n    \"&&\": {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: 'white',\n      width: '300px',\n      p: '1rem',\n      borderRadius: '8px',\n      padding: 15\n    }\n  },\n  popUpButton: {\n    \"&&\": {\n      width: '100%',\n      backgroundColor: '#ff5252',\n      color: 'white',\n      '&:hover': {\n        backgroundColor: 'black',\n        color: 'white'\n      }\n    }\n  }\n});\nconst TodoModal = _ref => {\n  _s();\n  let {\n    selectedTodo,\n    handleCloseModal,\n    handleUpdateTodo\n  } = _ref;\n  const classes = useStyles();\n  const textState = useHookstate((selectedTodo === null || selectedTodo === void 0 ? void 0 : selectedTodo.text) || '');\n  useEffect(() => {\n    if (selectedTodo) {\n      textState.set(selectedTodo.text);\n    } else {\n      textState.set('');\n    }\n  }, [selectedTodo]);\n  const handleChange = e => {\n    textState.set(e.target.value);\n  };\n  const handleUpdate = () => {\n    if (selectedTodo) {\n      handleUpdateTodo(selectedTodo.id, textState.get().trim());\n      handleCloseModal();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    open: Boolean(selectedTodo),\n    onClose: handleCloseModal,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.popUp,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Edit Todo\",\n        variant: \"outlined\",\n        onChange: handleChange,\n        type: \"text\",\n        value: textState.value,\n        sx: {\n          width: '100%',\n          mb: '1rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleUpdate,\n        className: classes.popUpButton,\n        children: \"Update Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoModal, \"rpajYnOewlOUboGAFDDaa0Ob0JY=\", false, function () {\n  return [useStyles, useHookstate];\n});\n_c = TodoModal;\nexport default TodoModal;\nvar _c;\n$RefreshReg$(_c, \"TodoModal\");","map":{"version":3,"names":["React","useEffect","Box","Modal","TextField","Button","makeStyles","useHookstate","jsxDEV","_jsxDEV","useStyles","popUp","position","top","left","transform","backgroundColor","width","p","borderRadius","padding","popUpButton","color","TodoModal","_ref","_s","selectedTodo","handleCloseModal","handleUpdateTodo","classes","textState","text","set","handleChange","e","target","value","handleUpdate","id","get","trim","open","Boolean","onClose","children","className","label","variant","onChange","type","sx","mb","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/mergestack/todoapp/src/components/EditTodoModal.tsx"],"sourcesContent":["import React, { ChangeEvent, useState, useEffect } from 'react';\nimport { Box, Modal, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { useHookstate } from '@hookstate/core';\nimport { useGlobalState } from '../store/todoStore'; // Import the global state hook\nconst useStyles = makeStyles({\n  popUp: {\n    \"&&\": {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: 'white',\n      width: '300px',\n      p: '1rem',\n      borderRadius: '8px',\n      padding: 15\n    }\n  },\n  popUpButton: {\n    \"&&\": {\n      width: '100%',\n      backgroundColor: '#ff5252',\n      color: 'white',\n      '&:hover': {\n        backgroundColor: 'black',\n        color: 'white',\n      },\n    }\n  },\n})\n\ntype Todo = {\n  id: string;\n  text: string;\n  completed?: boolean;\n};\n\ntype TodoModalProps = {\n  selectedTodo: Todo | null;\n  handleCloseModal: () => void;\n  handleUpdateTodo: (id: string, text: string) => void;\n};\n\nconst TodoModal = ({\n  selectedTodo,\n  handleCloseModal,\n  handleUpdateTodo,\n}: TodoModalProps) => {\n  const classes = useStyles();\n  const textState = useHookstate(selectedTodo?.text || '');\n\n  useEffect(() => {\n    if (selectedTodo) {\n      textState.set(selectedTodo.text);\n    } else {\n      textState.set('');\n    }\n  }, [selectedTodo]);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    textState.set(e.target.value);\n  };\n\n  const handleUpdate = () => {\n    if (selectedTodo) {\n      handleUpdateTodo(selectedTodo.id, textState.get().trim());\n      handleCloseModal();\n    }\n  };\n  return (\n    <Modal open={Boolean(selectedTodo)} onClose={handleCloseModal}>\n      <Box className={classes.popUp} >\n        <TextField\n          label=\"Edit Todo\"\n          variant=\"outlined\"\n          onChange={handleChange}\n          type=\"text\"\n          value={textState.value}\n          sx={{ width: '100%', mb: '1rem' }}\n        />\n        <Button\n          variant=\"outlined\"\n          onClick={handleUpdate}\n          className={classes.popUpButton}\n        >\n          Update Todo\n        </Button>\n      </Box>\n    </Modal>\n  );\n};\n\nexport default TodoModal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}