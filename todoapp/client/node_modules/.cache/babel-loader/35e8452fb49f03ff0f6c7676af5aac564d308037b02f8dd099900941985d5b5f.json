{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { TodoActionTypes } from \"state/todos/TodoActions\";\nfunction* fetchTodosSaga() {\n  try {\n    const response = yield call(axios.get, '/api/todos');\n    const todos = response.data;\n    yield put({\n      type: TodoActionTypes.FETCH_TODOS_SUCCESS,\n      payload: {\n        todos\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: TodoActionTypes.FETCH_TODOS_FAILURE,\n      payload: {\n        error: error.message\n      }\n    });\n  }\n}\nfunction* addTodoSaga(action) {\n  const newTodo = {\n    text: action.payload.text,\n    completed: false\n  };\n  try {\n    const response = yield call(axios.post, '/api/todos', newTodo);\n    const createdTodo = response.data;\n    yield put({\n      type: TodoActionTypes.ADD_TODO_SUCCESS,\n      payload: {\n        todo: createdTodo\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\nfunction* deleteTodoSaga(action) {\n  try {\n    const {\n      id\n    } = action.payload;\n    yield call(axios.delete, `/api/todos/${id}`);\n  } catch (error) {\n    console.error(error);\n  }\n}\nfunction* updateTodoSaga(action) {\n  try {\n    const {\n      id,\n      completed,\n      text\n    } = action.payload;\n    const updatedTodo = {\n      completed,\n      text\n    };\n    yield call(axios.put, `/api/todos/${id}`, updatedTodo, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\nfunction* toggleTodoSaga(action) {\n  try {\n    const {\n      id,\n      completed,\n      text\n    } = action.payload;\n    const updatedTodo = {\n      completed: !completed,\n      text\n    };\n    yield call(axios.put, `/api/todos/${id}`, updatedTodo, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  } catch (error) {\n    console.error(error);\n  }\n}\nfunction* watchFetchTodos() {\n  yield takeLatest(TodoActionTypes.FETCH_TODOS_REQUEST, fetchTodosSaga);\n  yield takeLatest(TodoActionTypes.ADD_TODO, addTodoSaga);\n  yield takeLatest(TodoActionTypes.DELETE_TODO, deleteTodoSaga);\n  yield takeLatest(TodoActionTypes.EDIT_TODO, updateTodoSaga);\n  yield takeLatest(TodoActionTypes.TOGGLE_TODO, toggleTodoSaga);\n}\nexport function* todoSagas() {\n  yield watchFetchTodos();\n}\n// End of File (EOF)","map":{"version":3,"names":["call","put","takeLatest","axios","TodoActionTypes","fetchTodosSaga","response","get","todos","data","type","FETCH_TODOS_SUCCESS","payload","error","FETCH_TODOS_FAILURE","message","addTodoSaga","action","newTodo","text","completed","post","createdTodo","ADD_TODO_SUCCESS","todo","console","deleteTodoSaga","id","delete","updateTodoSaga","updatedTodo","headers","toggleTodoSaga","watchFetchTodos","FETCH_TODOS_REQUEST","ADD_TODO","DELETE_TODO","EDIT_TODO","TOGGLE_TODO","todoSagas"],"sources":["/home/mergestack/todoapp/client/src/state/todos/Sagas.tsx"],"sourcesContent":["\nimport { call, put, takeLatest } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { TodoActionTypes } from \"state/todos/TodoActions\"\nimport { Todo, crudAPI } from \"components/Constants\";\n\nfunction* fetchTodosSaga(): any {\n  try {\n    const response = yield call(axios.get, '/api/todos');\n    const todos: Todo[] = response.data;\n    yield put({ type: TodoActionTypes.FETCH_TODOS_SUCCESS, payload: { todos } });\n  } catch (error: any) {\n    yield put({ type: TodoActionTypes.FETCH_TODOS_FAILURE, payload: { error: error.message } });\n  }\n}\n\nfunction* addTodoSaga(action: { type: string, payload: { text: string } }): Generator<any, void, any> {\n  const newTodo = {\n    text: action.payload.text,\n    completed: false,\n  };\n  try {\n    const response = yield call(axios.post, '/api/todos', newTodo);\n    const createdTodo = response.data;\n    yield put({ type: TodoActionTypes.ADD_TODO_SUCCESS, payload: { todo: createdTodo } });\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction* deleteTodoSaga(action: { type: string, payload: { id: string } }) {\n  try {\n    const { id } = action.payload;\n    yield call(axios.delete, `/api/todos/${id}`);\n  } catch (error: any) {\n    console.error(error)\n  }\n}\n\nfunction* updateTodoSaga(action: { type: string, payload: { id: string, text: string, completed: boolean } }) {\n  try {\n    const { id, completed, text } = action.payload;\n    const updatedTodo: Partial<Todo> = { completed, text }\n    yield call(axios.put, `/api/todos/${id}`, updatedTodo, {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error: any) {\n    console.error(error)\n  }\n\n}\nfunction* toggleTodoSaga(action: { type: string, payload: { id: string, text: string, completed: boolean } }) {\n  try {\n    const { id, completed, text } = action.payload;\n    const updatedTodo: Partial<Todo> = { completed: !completed, text }\n    yield call(axios.put, `/api/todos/${id}`, updatedTodo, {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error: any) {\n    console.error(error)\n  }\n\n}\n\nfunction* watchFetchTodos() {\n  yield takeLatest(TodoActionTypes.FETCH_TODOS_REQUEST, fetchTodosSaga);\n  yield takeLatest(TodoActionTypes.ADD_TODO, addTodoSaga);\n  yield takeLatest(TodoActionTypes.DELETE_TODO, deleteTodoSaga);\n  yield takeLatest(TodoActionTypes.EDIT_TODO, updateTodoSaga);\n  yield takeLatest(TodoActionTypes.TOGGLE_TODO, toggleTodoSaga);\n}\nexport function* todoSagas() {\n  yield watchFetchTodos();\n}\n// End of File (EOF)\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}