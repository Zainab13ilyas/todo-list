{"ast":null,"code":"var _jsxFileName = \"/home/mergestack/todoapp/src/components/EditTodoModal.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { Box, Modal, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { useGlobalState } from '../store/TodoStore';\nimport { useHookstate } from '@hookstate/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  popUp: {\n    \"&&\": {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: 'white',\n      width: '300px',\n      p: '1rem',\n      borderRadius: '8px',\n      padding: 15\n    }\n  },\n  popUpButton: {\n    \"&&\": {\n      width: '100%',\n      backgroundColor: '#ff5252',\n      color: 'white',\n      '&:hover': {\n        backgroundColor: 'black',\n        color: 'white'\n      }\n    }\n  }\n});\nconst TodoModal = _ref => {\n  _s();\n  let {\n    todoId,\n    handleCloseModal\n  } = _ref;\n  const classes = useStyles();\n  const {\n    tasksList\n  } = useGlobalState();\n  const text = useHookstate('');\n  useEffect(() => {\n    if (tasksList.value) {\n      const selectedTodo = tasksList.value.find(todo => todo.id === todoId);\n      if (selectedTodo) {\n        text.set(selectedTodo.text);\n      } else {\n        /*#__PURE__*/_jsxDEV(\"text\", {\n          className: \"set\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)('');\n        handleCloseModal();\n      }\n    }\n  }, [todoId, handleCloseModal]);\n  const handleChange = e => {\n    text.set(e.target.value);\n  };\n  const handleUpdate = () => {\n    tasksList.set(prevTodos => prevTodos.map(todo => todo.id === todoId ? {\n      ...todo,\n      text: text.get().trim()\n    } : todo));\n    handleCloseModal();\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    open: Boolean(todoId),\n    onClose: handleCloseModal,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.popUp,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Edit Todo\",\n        variant: \"outlined\",\n        onChange: handleChange,\n        type: \"text\",\n        value: text,\n        sx: {\n          width: '100%',\n          mb: '1rem'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: handleUpdate,\n        className: classes.popUpButton,\n        children: \"Update Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoModal, \"GeGNhZqwU5M3hwDdeh8j89q5tiU=\", false, function () {\n  return [useStyles, useGlobalState, useHookstate];\n});\n_c = TodoModal;\nexport default TodoModal;\n// End of File (EOF)\nvar _c;\n$RefreshReg$(_c, \"TodoModal\");","map":{"version":3,"names":["useEffect","Box","Modal","TextField","Button","makeStyles","useGlobalState","useHookstate","jsxDEV","_jsxDEV","useStyles","popUp","position","top","left","transform","backgroundColor","width","p","borderRadius","padding","popUpButton","color","TodoModal","_ref","_s","todoId","handleCloseModal","classes","tasksList","text","value","selectedTodo","find","todo","id","set","className","fileName","_jsxFileName","lineNumber","columnNumber","handleChange","e","target","handleUpdate","prevTodos","map","get","trim","open","Boolean","onClose","children","label","variant","onChange","type","sx","mb","onClick","_c","$RefreshReg$"],"sources":["/home/mergestack/todoapp/src/components/EditTodoModal.tsx"],"sourcesContent":["import { ChangeEvent, useState, useEffect } from 'react';\nimport { Box, Modal, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { useGlobalState } from '../store/TodoStore';\nimport { useHookstate } from '@hookstate/core';\nconst useStyles = makeStyles({\n  popUp: {\n    \"&&\": {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      backgroundColor: 'white',\n      width: '300px',\n      p: '1rem',\n      borderRadius: '8px',\n      padding: 15\n    }\n  },\n  popUpButton: {\n    \"&&\": {\n      width: '100%',\n      backgroundColor: '#ff5252',\n      color: 'white',\n      '&:hover': {\n        backgroundColor: 'black',\n        color: 'white',\n      },\n    }\n  },\n})\n\ntype TodoModalProps = {\n  todoId: string | null;\n  handleCloseModal: () => void;\n};\n\nconst TodoModal = ({ todoId, handleCloseModal }: TodoModalProps) => {\n\n  const classes = useStyles();\n  const { tasksList } = useGlobalState();\n  const text = useHookstate('');\n\n  useEffect(() => {\n    if (tasksList.value) {\n      const selectedTodo = tasksList.value.find(todo => todo.id === todoId);\n      if (selectedTodo) {\n        text.set(selectedTodo.text)\n      } else {\n        <text className=\"set\"></text>('')\n        handleCloseModal();\n      }\n    }\n  }, [todoId, handleCloseModal]);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    text.set(e.target.value);\n  };\n\n  const handleUpdate = () => {\n    tasksList.set(prevTodos =>\n      prevTodos.map(todo =>\n        todo.id === todoId ? { ...todo, text: text.get().trim() } : todo\n      )\n    );\n    handleCloseModal();\n  };\n  return (\n    <Modal open={Boolean(todoId)} onClose={handleCloseModal}>\n      <Box className={classes.popUp} >\n        <TextField\n          label=\"Edit Todo\"\n          variant=\"outlined\"\n          onChange={handleChange}\n          type=\"text\"\n          value={text}\n          sx={{ width: '100%', mb: '1rem' }}\n        />\n        <Button\n          variant=\"outlined\"\n          onClick={handleUpdate}\n          className={classes.popUpButton}\n        >\n          Update Todo\n        </Button>\n      </Box>\n    </Modal>\n  );\n};\n\nexport default TodoModal;\n// End of File (EOF)\n\n"],"mappings":";;AAAA,SAAgCA,SAAS,QAAQ,OAAO;AACxD,SAASC,GAAG,EAAEC,KAAK,EAAEC,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,UAAU,QAAQ,aAAa;AACxC,SAASC,cAAc,QAAQ,oBAAoB;AACnD,SAASC,YAAY,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC/C,MAAMC,SAAS,GAAGL,UAAU,CAAC;EAC3BM,KAAK,EAAE;IACL,IAAI,EAAE;MACJC,QAAQ,EAAE,UAAU;MACpBC,GAAG,EAAE,KAAK;MACVC,IAAI,EAAE,KAAK;MACXC,SAAS,EAAE,uBAAuB;MAClCC,eAAe,EAAE,OAAO;MACxBC,KAAK,EAAE,OAAO;MACdC,CAAC,EAAE,MAAM;MACTC,YAAY,EAAE,KAAK;MACnBC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,WAAW,EAAE;IACX,IAAI,EAAE;MACJJ,KAAK,EAAE,MAAM;MACbD,eAAe,EAAE,SAAS;MAC1BM,KAAK,EAAE,OAAO;MACd,SAAS,EAAE;QACTN,eAAe,EAAE,OAAO;QACxBM,KAAK,EAAE;MACT;IACF;EACF;AACF,CAAC,CAAC;AAOF,MAAMC,SAAS,GAAGC,IAAA,IAAkD;EAAAC,EAAA;EAAA,IAAjD;IAAEC,MAAM;IAAEC;EAAiC,CAAC,GAAAH,IAAA;EAE7D,MAAMI,OAAO,GAAGlB,SAAS,CAAC,CAAC;EAC3B,MAAM;IAAEmB;EAAU,CAAC,GAAGvB,cAAc,CAAC,CAAC;EACtC,MAAMwB,IAAI,GAAGvB,YAAY,CAAC,EAAE,CAAC;EAE7BP,SAAS,CAAC,MAAM;IACd,IAAI6B,SAAS,CAACE,KAAK,EAAE;MACnB,MAAMC,YAAY,GAAGH,SAAS,CAACE,KAAK,CAACE,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKT,MAAM,CAAC;MACrE,IAAIM,YAAY,EAAE;QAChBF,IAAI,CAACM,GAAG,CAACJ,YAAY,CAACF,IAAI,CAAC;MAC7B,CAAC,MAAM;QACL,aAAArB,OAAA;UAAM4B,SAAS,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,CAAC,EAAE,CAAC;QACjCd,gBAAgB,CAAC,CAAC;MACpB;IACF;EACF,CAAC,EAAE,CAACD,MAAM,EAAEC,gBAAgB,CAAC,CAAC;EAE9B,MAAMe,YAAY,GAAIC,CAAgC,IAAK;IACzDb,IAAI,CAACM,GAAG,CAACO,CAAC,CAACC,MAAM,CAACb,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMc,YAAY,GAAGA,CAAA,KAAM;IACzBhB,SAAS,CAACO,GAAG,CAACU,SAAS,IACrBA,SAAS,CAACC,GAAG,CAACb,IAAI,IAChBA,IAAI,CAACC,EAAE,KAAKT,MAAM,GAAG;MAAE,GAAGQ,IAAI;MAAEJ,IAAI,EAAEA,IAAI,CAACkB,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC;IAAE,CAAC,GAAGf,IAC9D,CACF,CAAC;IACDP,gBAAgB,CAAC,CAAC;EACpB,CAAC;EACD,oBACElB,OAAA,CAACP,KAAK;IAACgD,IAAI,EAAEC,OAAO,CAACzB,MAAM,CAAE;IAAC0B,OAAO,EAAEzB,gBAAiB;IAAA0B,QAAA,eACtD5C,OAAA,CAACR,GAAG;MAACoC,SAAS,EAAET,OAAO,CAACjB,KAAM;MAAA0C,QAAA,gBAC5B5C,OAAA,CAACN,SAAS;QACRmD,KAAK,EAAC,WAAW;QACjBC,OAAO,EAAC,UAAU;QAClBC,QAAQ,EAAEd,YAAa;QACvBe,IAAI,EAAC,MAAM;QACX1B,KAAK,EAAED,IAAK;QACZ4B,EAAE,EAAE;UAAEzC,KAAK,EAAE,MAAM;UAAE0C,EAAE,EAAE;QAAO;MAAE;QAAArB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACFhC,OAAA,CAACL,MAAM;QACLmD,OAAO,EAAC,UAAU;QAClBK,OAAO,EAAEf,YAAa;QACtBR,SAAS,EAAET,OAAO,CAACP,WAAY;QAAAgC,QAAA,EAChC;MAED;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEZ,CAAC;AAAChB,EAAA,CAnDIF,SAAS;EAAA,QAEGb,SAAS,EACHJ,cAAc,EACvBC,YAAY;AAAA;AAAAsD,EAAA,GAJrBtC,SAAS;AAqDf,eAAeA,SAAS;AACxB;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}